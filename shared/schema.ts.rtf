{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import \{ pgTable, text, serial, integer, boolean, date, timestamp, time \} from "drizzle-orm/pg-core";\
import \{ createInsertSchema \} from "drizzle-zod";\
import \{ z \} from "zod";\
\
// User schema (kept from original)\
export const users = pgTable("users", \{\
  id: serial("id").primaryKey(),\
  username: text("username").notNull().unique(),\
  password: text("password").notNull(),\
\});\
\
export const insertUserSchema = createInsertSchema(users).pick(\{\
  username: true,\
  password: true,\
\});\
\
export type InsertUser = z.infer<typeof insertUserSchema>;\
export type User = typeof users.$inferSelect;\
\
// Meal schema\
export const meals = pgTable("meals", \{\
  id: serial("id").primaryKey(),\
  day: text("day").notNull(), // e.g., "monday", "tuesday"\
  time: text("time").notNull(), // e.g., "12:00 PM"\
  description: text("description").notNull(),\
  calories: integer("calories").notNull(),\
  dayNumber: integer("day_number").notNull(), // 1-40\
\});\
\
export const insertMealSchema = createInsertSchema(meals).omit(\{\
  id: true,\
\});\
\
export type InsertMeal = z.infer<typeof insertMealSchema>;\
export type Meal = typeof meals.$inferSelect;\
\
// Workout schema\
export const workouts = pgTable("workouts", \{\
  id: serial("id").primaryKey(),\
  day: text("day").notNull(), // e.g., "monday", "tuesday"\
  type: text("type").notNull(), // e.g., "Lower Body & Core"\
  dayNumber: integer("day_number").notNull(), // 1-40\
\});\
\
export const insertWorkoutSchema = createInsertSchema(workouts).omit(\{\
  id: true,\
\});\
\
export type InsertWorkout = z.infer<typeof insertWorkoutSchema>;\
export type Workout = typeof workouts.$inferSelect;\
\
// Exercise schema\
export const exercises = pgTable("exercises", \{\
  id: serial("id").primaryKey(),\
  workoutId: integer("workout_id").notNull(),\
  name: text("name").notNull(),\
  repsAndWeight: text("reps_and_weight").notNull(),\
\});\
}